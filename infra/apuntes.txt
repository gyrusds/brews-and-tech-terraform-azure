1.providers- elemento que va a conectar a azure (oo_provider)

2. resources

3. locals son variables de entorno

4. variables: no estan rtelacionadas con los locals, tienen su propio bloque. Aunque a efectos practicos, a terraform le da igual

5. terraform.tfvars: aqui pondriamos el tamaño de la maquina, variables que dsingan PRD y DEV carpeta: vars y dentro dev.tfvars y prd.tfvars

6.virtualmachine.tf: el resource group y el network interface tenemos que crearlos. El resource grop y el location estan enlazados y 
preguntamos a azure el grupo de recursos que queremos y le pedimos que  nos diga donde estan. Para ello buscamos azurerm_resource_group
 (data te coge un elemento creardo en el cloud y el resource te crea un recurso)en la docu de terraform. Y lo guardamos en un nuevo 
archivo data tf.

7. network: en la docu buscar azurerm_network_interface

*** Para dudas, miras el nombre base, y buscar en la docu de terraform: https://registry.terraform.io/



PARA DESPLEGAR
En el terminal donde hayamos hecho el azure login.
Escribimos: terraform init
una vez en la consola de teraform, mirar en el readme los comandos:
3. Terraform init
4. terraform plan (analiza que es lo que hay desplegado y en tu codigo para decirte que va a desplegar)
5. Plan vs apply (nos hace un plan y nos pregunta si queremos desplegar, 'yes'). Al aplicar se crean distintas cosas:
	.terraform
	.terraform.lock.hcl es un log 
	terraform.tfstate en un json con toda la informacion, este fichero es e importante. Se guarda en un sitio privado
		en AWs(bucket) o azure(storage account). En 000_providers, añadiremos backend "azurerm" en el que meteremos 
		resourcegroup, storage_account y un conatainer_name, que es como llama terraform al tfstate.
7. Destroy
